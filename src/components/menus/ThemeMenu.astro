---
import { getLangFromURL, useTranslations, type TranslationKeyProp } from 'src/i18n'
import { THEME_COOKIE_KEY } from "src/utils/theme-switcher"
import { THEME_MODE, THEME } from 'src/types/theme.type'

import ComputerIcon from 'src/assets/icons/ComputerIcon.astro'
import MoonIcon from 'src/assets/icons/MoonIcon.astro'
import SunIcon from 'src/assets/icons/SunIcon.astro'
import Menu from "src/components/menus/Menu.astro"

const themes = Object.freeze({
  [THEME_MODE.SYSTEM]: {
    code: 'theme.mode.system',
    Icon: ComputerIcon
  },
  [THEME_MODE.WHITE]: {
    code: 'theme.mode.light',
    Icon: SunIcon
  },
  [THEME_MODE.DARK]: {
    code: 'theme.mode.dark',
    Icon: MoonIcon
  }
})

const lang = getLangFromURL(Astro.url)
const t = useTranslations(lang)

const currentThemeMode = Astro.cookies.get(THEME_COOKIE_KEY)?.value
const currentTheme = currentThemeMode === THEME.LIGHT 
  ? themes[THEME_MODE.WHITE] 
  : currentThemeMode === THEME.DARK 
    ? themes[THEME_MODE.DARK]
    : themes[THEME_MODE.SYSTEM]
---

<theme-menu-dropdown>
  <Menu align='right'>
    <button
      class='flex items-center justify-center'
      title={t('theme.button.label')}
      slot="toggle-button"
      aria-label='theme'
    >
      <currentTheme.Icon class='h-6'/>
    </button>
    {Object.entries(themes).map(([mode, theme]) => {
      const { Icon, code } = theme
      return (
        <li>
          <button
            class='flex w-full items-center justify-start gap-2 rounded-md px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700'
            data-dropdown-item
            aria-label={mode}
          >
            <Icon class="h-6"/>
            <span>{t(code as TranslationKeyProp)}</span>
          </button>
        </li>
      )
    })}
  </Menu>
</theme-menu-dropdown>

<script>
  import { setDarkTheme, setLightTheme, removeTheme } from 'src/utils/theme-switcher'
  import { THEME_MODE } from 'src/types/theme.type'

  import type { Menu } from 'src/utils/menu'

  class ThemeMenuDropdown extends HTMLElement {
    constructor () {
      super()

      const menuItemButtons = this.querySelectorAll<HTMLButtonElement>('button[data-dropdown-item]')
      const menu = this.querySelector<Menu>('menu-dropdown')
      menuItemButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const themeMode = button.getAttribute('aria-label')
          if (themeMode === THEME_MODE.DARK.toString()) setDarkTheme()
          else if (themeMode === THEME_MODE.WHITE.toString()) setLightTheme()
          else removeTheme()
          menu?.hideDropdown()
        })
      })
    }
  }

  customElements.define('theme-menu-dropdown', ThemeMenuDropdown)
</script>
