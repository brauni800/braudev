---
interface Props {
  align?: 'left' | 'right'
}

const { align = 'left' } = Astro.props
---

<astro-menu class='relative inline-block'>
  <div class="flex transition-filter hover:brightness-75">
    <slot name="toggle-button"/>
  </div>
  <ul
    class:list={[
      'absolute hidden origin-top-right rounded-md border-2 bg-gray-50 p-1 text-gray-800 shadow-lg dark:border-gray-700 dark:bg-gray-800 dark:text-gray-50',
      align === 'left' ? 'left-0' : 'right-0'
    ]}
  >
    <slot />
  </ul>
</astro-menu>

<script>
  class Menu extends HTMLElement {
    constructor () {
      super()

      const toggleButton = this.querySelector('button')
      const dropdown = this.querySelector('ul')

      toggleButton?.addEventListener('click', () => {
        if (Boolean(dropdown?.classList.contains('hidden')) || Boolean(dropdown?.classList.contains('animate-fade-out'))) {
          dropdown?.classList.remove('hidden')
          dropdown?.classList.remove('animate-fade-out')
        } else {
          dropdown?.classList.add('animate-fade-out')
        }
      })

      window.addEventListener('click', (event) => {
        if (!toggleButton?.contains(event.target as Node) && !dropdown?.contains(event.target as Node)) {
          dropdown?.classList.add('animate-fade-out')
        }
      })
    }
  }
  customElements.define('astro-menu', Menu)
</script>
